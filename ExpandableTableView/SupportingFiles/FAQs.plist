<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Title</key>
		<string>Closures Lorem ipsum dolor sit amet, consectetur adipiscing elit.</string>
		<key>Description</key>
		<string>Closures are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages. Closures can capture and store references to any constants and variables from the context in which they are defined. This is known as closing over those constants and variables. Swift handles all of the memory management of capturing for you.</string>
	</dict>
	<dict>
		<key>Title</key>
		<string>Classes and Structures</string>
		<key>Description</key>
		<string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
	</dict>
	<dict>
		<key>Title</key>
		<string>Protocols</string>
		<key>Description</key>
		<string>A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be adopted by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to conform to that protocol.</string>
	</dict>
	<dict>
		<key>Title</key>
		<string>Extensions Lorem ipsum dolor sit amet, consectetur adipiscing elit.</string>
		<key>Description</key>
		<string>Extensions add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions do not have names.)</string>
	</dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures.Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures.Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
    <dict>
        <key>Title</key>
        <string>Classes and Structures</string>
        <key>Description</key>
        <string>Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.</string>
    </dict>
</array>
</plist>
